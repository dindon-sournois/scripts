#!/bin/bash
set -x

# config variables
log_file="$HOME/.cache/rofi-bluetooth.log"
card_speakers="alsa_card.pci-0000_00_1f.3"
card_headset="alsa_card.usb-SteelSeries_SteelSeries_Arctis_7P-00"
card_bt="bluez_card." # will be concatenated with the bluetooth device address
out_speakers="output:analog-stereo+input:analog-stereo"
out_headset="output:analog-stereo+input:mono-fallback"
out_bt="a2dp_sink"

function leave () {
    i3b-send-signal 2  # volume
    i3b-send-signal 22 # bluetooth
    exit 1
}

# rofi initial selection
if [[ -z "$@" ]]; then
    echo "0 Integrated speakers"
    echo "1 USB Headset"
    # list all bluetooth devices and number them starting with 2
    nl -v 2 -w1 -s ' ' <(bluetoothctl devices | cut -d ' ' -f3-)

# feed input from previous selection
else
    opt=$(echo $@|awk '{print $1}')

    # use speakers
    if [[ "${opt}" == 0 ]]; then
        # enable speakers
        pactl set-card-profile ${card_speakers} ${out_speakers}

        # disable USB headset and bluetooth
        pactl set-card-profile ${card_headset} off
        bluetoothctl power off >/dev/null 2>&1
        bluetoothctl agent off >/dev/null 2>&1
        bluetoothctl disconnect >/dev/null 2>&1

    # use USB headset
    elif [[ "${opt}" == 1 ]]; then
        # enable USB headset
        pactl set-card-profile ${card_headset} ${out_headset}

        # disable speakers and bluetooth
        pactl set-card-profile ${card_speakers} off
        bluetoothctl power off >/dev/null 2>&1
        bluetoothctl agent off >/dev/null 2>&1
        bluetoothctl disconnect >/dev/null 2>&1

    # use bluetooth device
    else
        # name without prefixed device number
        name=$(echo $@ | awk '{$1=""; print $0}')

        # probably useless check but we can avoid activating bluetooth if the
        # user entered gibberish
        [[ ${name} == "" ]] && leave
        echo "name: $name" >> ${log_file}

        # backup old bluetooth status
        old_status=$(bluetoothctl show | grep "Powered:" | awk '{print $2}')
        bluetoothctl power on >/dev/null 2>&1
        bluetoothctl agent on >/dev/null 2>&1

        selected=$(bluetoothctl devices | grep $name)
        echo "selected: $selected" >> ${log_file}
        # if no match, then either a device reported by bluetoothctl doesn't
        # exists anymore (unlikely) or the user entered gibberish
        if [[ ${selected} == "" ]]; then
            echo "no selection, leaving" >> ${log_file}
            bluetoothctl power ${old_status} >/dev/null 2>&1
            bluetoothctl agent ${old_status} >/dev/null 2>&1
            leave
        fi

        # get bluetooth device address (BD_ADDR)
        addr=$(echo ${selected} | awk '{print $2}')
        echo "addr: $addr" >> ${log_file}

        if [[ $(bluetoothctl info ${addr} | grep "Connected: yes") ]]; then
          echo "already connected, leaving" >> ${log_file}
          leave
        fi

        # disconnect old device and connect to selection with a 3s timeout
        bluetoothctl disconnect >/dev/null 2>&1
        timeout 3 bluetoothctl connect ${addr} >> ${log_file} 2>&1

        # concat bluetooth card name and device addr
	      card="${card_bt}$(echo ${addr} | tr ':' '_')"

        pactl set-card-profile $card ${out_bt}
        pactl set-card-profile ${card_speakers} off
        pactl set-card-profile ${card_headset} off
    fi
    leave
fi
